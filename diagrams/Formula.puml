@startuml
'https://plantuml.com/class-diagram

interface Visitable {
    + accept(visitor: Visitor)
}

interface Visitor {
    + visit(constant: Constant )
    + visit(variable: Variable)
    + visit(addition: Addition)
    + visit(sub: Subtraction)
    + visit(mult: Multiplication)
    + visit(div: Division)
    + visit(mod: Module)
    + visit(exp: Exponentiation)
    + visit(function: Function)
}

interface Symbol extends Visitable {
    + accept(visitor: Visitor)
}

class Constant implements Symbol {
    - value: double
    + accept(visitor: Visitor)
    + computeWithValues(Map<String, Double> values): Double
}

interface UnaryOperation extends Symbol {
    + accept(visitor: Visitor)
    + computeWithValues(Map<String, Double> values): Double
    + getSubSymbol(): Symbol
}

class Sqrt implements UnaryOperation {
    + accept(visitor: Visitor)
}

class Pow implements UnaryOperation {
    + accept(visitor: Visitor)
}

class Module implements UnaryOperation {
    + accept(visitor: Visitor)
}

interface BinaryOperation extends Symbol {
    + accept(visitor: Visitor)
    + computeWithValues(Map<String, Double> values): Double
    + getFirst(): Symbol
    + getSecond(): Symbol
}

class Addition implements BinaryOperation {
    - first: Symbol
    - second: Symbol
    + getFirst: Symbol
    + getSecond: Symbol
    + accept(visitor: Visitor)
    + computeWithValues(Map<String, Double> values): Double
}

class Subtraction implements BinaryOperation {
    - first: Symbol
    - second: Symbol
    + getFirst: Symbol
    + getSecond: Symbol
    + accept(visitor: Visitor)
    + computeWithValues(Map<String, Double> values): Double
}

class Multiplication implements BinaryOperation {
    - first: Symbol
    - second: Symbol
    + getFirst: Symbol
    + getSecond: Symbol
    + accept(visitor: Visitor)
    + computeWithValues(Map<String, Double> values): Double
}

class Division implements BinaryOperation {
    - first: Symbol
    - second: Symbol
    + getFirst: Symbol
    + getSecond: Symbol
    + accept(visitor: Visitor)
    + computeWithValues(Map<String, Double> values): Double
}

class Exponentiation implements BinaryOperation {
    - first: Symbol
    - second: Symbol
    + getFirst: Symbol
    + getSecond: Symbol
    + accept(visitor: Visitor)
    + computeWithValues(Map<String, Double> values): Double
}

class Variable implements Symbol {
    - name: String
    + accept(visitor: Visitor)
}

interface Function extends Visitable {
    + getAllVariables(): List<String>
    + compute(): Double
    + computeWithValues(Map<String, Double> values): Double
    + getRootSymbol(): Visitable
}

class FunctionImpl implements Function {
    + getAllVariables(): List<String>
    + compute(): Double
    + computeWithValues(Map<String, Double> values): Double
    + getRootSymbol(): Visitable
}

class Printer implements Visitor {
    - result: StringBuilder
    + getResult(): String
    + eraseOuterBracesIfNeeded(string: String): String
    + visit(constant: Constant)
    + visit(variable: Variable)
    + visit(addition: Addition)
    + visit(sub: Subtraction)
    + visit(mult: Multiplication)
    + visit(div: Division)
    + visit(mod: Module)
    + visit(exp: Exponentiation)
    + visit(function: Function)
}

class VariableFinder implements Visitor {
    - result: List<String>
    + getResult(): List<String>
    + eraseOuterBracesIfNeeded(string: String): String
    + visit(constant: Constant)
    + visit(variable: Variable)
    + visit(addition: Addition)
    + visit(sub: Subtraction)
    + visit(mult: Multiplication)
    + visit(div: Division)
    + visit(mod: Module)
    + visit(exp: Exponentiation)
    + visit(function: Function)
}

Function *---> Symbol
UnaryOperation *--> Symbol
BinaryOperation *--> Symbol
Visitable -> Visitor

@enduml